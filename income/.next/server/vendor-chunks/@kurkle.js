"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@kurkle";
exports.ids = ["vendor-chunks/@kurkle"];
exports.modules = {

/***/ "(ssr)/./node_modules/@kurkle/color/dist/color.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/@kurkle/color/dist/color.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Color: () => (/* binding */ Color),\n/* harmony export */   b2n: () => (/* binding */ b2n),\n/* harmony export */   b2p: () => (/* binding */ b2p),\n/* harmony export */   \"default\": () => (/* binding */ index_esm),\n/* harmony export */   hexParse: () => (/* binding */ hexParse),\n/* harmony export */   hexString: () => (/* binding */ hexString),\n/* harmony export */   hsl2rgb: () => (/* binding */ hsl2rgb),\n/* harmony export */   hslString: () => (/* binding */ hslString),\n/* harmony export */   hsv2rgb: () => (/* binding */ hsv2rgb),\n/* harmony export */   hueParse: () => (/* binding */ hueParse),\n/* harmony export */   hwb2rgb: () => (/* binding */ hwb2rgb),\n/* harmony export */   lim: () => (/* binding */ lim),\n/* harmony export */   n2b: () => (/* binding */ n2b),\n/* harmony export */   n2p: () => (/* binding */ n2p),\n/* harmony export */   nameParse: () => (/* binding */ nameParse),\n/* harmony export */   p2b: () => (/* binding */ p2b),\n/* harmony export */   rgb2hsl: () => (/* binding */ rgb2hsl),\n/* harmony export */   rgbParse: () => (/* binding */ rgbParse),\n/* harmony export */   rgbString: () => (/* binding */ rgbString),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   round: () => (/* binding */ round)\n/* harmony export */ });\n/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */ function round(v) {\n    return v + 0.5 | 0;\n}\nconst lim = (v, l, h)=>Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n    return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n    return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n    return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n    return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n    return lim(round(v * 100), 0, 100);\n}\nconst map$1 = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15\n};\nconst hex = [\n    ...\"0123456789ABCDEF\"\n];\nconst h1 = (b)=>hex[b & 0xF];\nconst h2 = (b)=>hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = (b)=>(b & 0xF0) >> 4 === (b & 0xF);\nconst isShort = (v)=>eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n    var len = str.length;\n    var ret;\n    if (str[0] === \"#\") {\n        if (len === 4 || len === 5) {\n            ret = {\n                r: 255 & map$1[str[1]] * 17,\n                g: 255 & map$1[str[2]] * 17,\n                b: 255 & map$1[str[3]] * 17,\n                a: len === 5 ? map$1[str[4]] * 17 : 255\n            };\n        } else if (len === 7 || len === 9) {\n            ret = {\n                r: map$1[str[1]] << 4 | map$1[str[2]],\n                g: map$1[str[3]] << 4 | map$1[str[4]],\n                b: map$1[str[5]] << 4 | map$1[str[6]],\n                a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255\n            };\n        }\n    }\n    return ret;\n}\nconst alpha = (a, f)=>a < 255 ? f(a) : \"\";\nfunction hexString(v) {\n    var f = isShort(v) ? h1 : h2;\n    return v ? \"#\" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : undefined;\n}\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n    const a = s * Math.min(l, 1 - l);\n    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return [\n        f(0),\n        f(8),\n        f(4)\n    ];\n}\nfunction hsv2rgbn(h, s, v) {\n    const f = (n, k = (n + h / 60) % 6)=>v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n    return [\n        f(5),\n        f(3),\n        f(1)\n    ];\n}\nfunction hwb2rgbn(h, w, b) {\n    const rgb = hsl2rgbn(h, 1, 0.5);\n    let i;\n    if (w + b > 1) {\n        i = 1 / (w + b);\n        w *= i;\n        b *= i;\n    }\n    for(i = 0; i < 3; i++){\n        rgb[i] *= 1 - w - b;\n        rgb[i] += w;\n    }\n    return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n    if (r === max) {\n        return (g - b) / d + (g < b ? 6 : 0);\n    }\n    if (g === max) {\n        return (b - r) / d + 2;\n    }\n    return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n    const range = 255;\n    const r = v.r / range;\n    const g = v.g / range;\n    const b = v.b / range;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n    let h, s, d;\n    if (max !== min) {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = hueValue(r, g, b, d, max);\n        h = h * 60 + 0.5;\n    }\n    return [\n        h | 0,\n        s || 0,\n        l\n    ];\n}\nfunction calln(f, a, b, c) {\n    return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n    return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n    return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n    return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n    return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n    const m = HUE_RE.exec(str);\n    let a = 255;\n    let v;\n    if (!m) {\n        return;\n    }\n    if (m[5] !== v) {\n        a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n    }\n    const h = hue(+m[2]);\n    const p1 = +m[3] / 100;\n    const p2 = +m[4] / 100;\n    if (m[1] === \"hwb\") {\n        v = hwb2rgb(h, p1, p2);\n    } else if (m[1] === \"hsv\") {\n        v = hsv2rgb(h, p1, p2);\n    } else {\n        v = hsl2rgb(h, p1, p2);\n    }\n    return {\n        r: v[0],\n        g: v[1],\n        b: v[2],\n        a: a\n    };\n}\nfunction rotate(v, deg) {\n    var h = rgb2hsl(v);\n    h[0] = hue(h[0] + deg);\n    h = hsl2rgb(h);\n    v.r = h[0];\n    v.g = h[1];\n    v.b = h[2];\n}\nfunction hslString(v) {\n    if (!v) {\n        return;\n    }\n    const a = rgb2hsl(v);\n    const h = a[0];\n    const s = n2p(a[1]);\n    const l = n2p(a[2]);\n    return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst map = {\n    x: \"dark\",\n    Z: \"light\",\n    Y: \"re\",\n    X: \"blu\",\n    W: \"gr\",\n    V: \"medium\",\n    U: \"slate\",\n    A: \"ee\",\n    T: \"ol\",\n    S: \"or\",\n    B: \"ra\",\n    C: \"lateg\",\n    D: \"ights\",\n    R: \"in\",\n    Q: \"turquois\",\n    E: \"hi\",\n    P: \"ro\",\n    O: \"al\",\n    N: \"le\",\n    M: \"de\",\n    L: \"yello\",\n    F: \"en\",\n    K: \"ch\",\n    G: \"arks\",\n    H: \"ea\",\n    I: \"ightg\",\n    J: \"wh\"\n};\nconst names$1 = {\n    OiceXe: \"f0f8ff\",\n    antiquewEte: \"faebd7\",\n    aqua: \"ffff\",\n    aquamarRe: \"7fffd4\",\n    azuY: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"0\",\n    blanKedOmond: \"ffebcd\",\n    Xe: \"ff\",\n    XeviTet: \"8a2be2\",\n    bPwn: \"a52a2a\",\n    burlywood: \"deb887\",\n    caMtXe: \"5f9ea0\",\n    KartYuse: \"7fff00\",\n    KocTate: \"d2691e\",\n    cSO: \"ff7f50\",\n    cSnflowerXe: \"6495ed\",\n    cSnsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"ffff\",\n    xXe: \"8b\",\n    xcyan: \"8b8b\",\n    xgTMnPd: \"b8860b\",\n    xWay: \"a9a9a9\",\n    xgYF: \"6400\",\n    xgYy: \"a9a9a9\",\n    xkhaki: \"bdb76b\",\n    xmagFta: \"8b008b\",\n    xTivegYF: \"556b2f\",\n    xSange: \"ff8c00\",\n    xScEd: \"9932cc\",\n    xYd: \"8b0000\",\n    xsOmon: \"e9967a\",\n    xsHgYF: \"8fbc8f\",\n    xUXe: \"483d8b\",\n    xUWay: \"2f4f4f\",\n    xUgYy: \"2f4f4f\",\n    xQe: \"ced1\",\n    xviTet: \"9400d3\",\n    dAppRk: \"ff1493\",\n    dApskyXe: \"bfff\",\n    dimWay: \"696969\",\n    dimgYy: \"696969\",\n    dodgerXe: \"1e90ff\",\n    fiYbrick: \"b22222\",\n    flSOwEte: \"fffaf0\",\n    foYstWAn: \"228b22\",\n    fuKsia: \"ff00ff\",\n    gaRsbSo: \"dcdcdc\",\n    ghostwEte: \"f8f8ff\",\n    gTd: \"ffd700\",\n    gTMnPd: \"daa520\",\n    Way: \"808080\",\n    gYF: \"8000\",\n    gYFLw: \"adff2f\",\n    gYy: \"808080\",\n    honeyMw: \"f0fff0\",\n    hotpRk: \"ff69b4\",\n    RdianYd: \"cd5c5c\",\n    Rdigo: \"4b0082\",\n    ivSy: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavFMr: \"e6e6fa\",\n    lavFMrXsh: \"fff0f5\",\n    lawngYF: \"7cfc00\",\n    NmoncEffon: \"fffacd\",\n    ZXe: \"add8e6\",\n    ZcSO: \"f08080\",\n    Zcyan: \"e0ffff\",\n    ZgTMnPdLw: \"fafad2\",\n    ZWay: \"d3d3d3\",\n    ZgYF: \"90ee90\",\n    ZgYy: \"d3d3d3\",\n    ZpRk: \"ffb6c1\",\n    ZsOmon: \"ffa07a\",\n    ZsHgYF: \"20b2aa\",\n    ZskyXe: \"87cefa\",\n    ZUWay: \"778899\",\n    ZUgYy: \"778899\",\n    ZstAlXe: \"b0c4de\",\n    ZLw: \"ffffe0\",\n    lime: \"ff00\",\n    limegYF: \"32cd32\",\n    lRF: \"faf0e6\",\n    magFta: \"ff00ff\",\n    maPon: \"800000\",\n    VaquamarRe: \"66cdaa\",\n    VXe: \"cd\",\n    VScEd: \"ba55d3\",\n    VpurpN: \"9370db\",\n    VsHgYF: \"3cb371\",\n    VUXe: \"7b68ee\",\n    VsprRggYF: \"fa9a\",\n    VQe: \"48d1cc\",\n    VviTetYd: \"c71585\",\n    midnightXe: \"191970\",\n    mRtcYam: \"f5fffa\",\n    mistyPse: \"ffe4e1\",\n    moccasR: \"ffe4b5\",\n    navajowEte: \"ffdead\",\n    navy: \"80\",\n    Tdlace: \"fdf5e6\",\n    Tive: \"808000\",\n    TivedBb: \"6b8e23\",\n    Sange: \"ffa500\",\n    SangeYd: \"ff4500\",\n    ScEd: \"da70d6\",\n    pOegTMnPd: \"eee8aa\",\n    pOegYF: \"98fb98\",\n    pOeQe: \"afeeee\",\n    pOeviTetYd: \"db7093\",\n    papayawEp: \"ffefd5\",\n    pHKpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pRk: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powMrXe: \"b0e0e6\",\n    purpN: \"800080\",\n    YbeccapurpN: \"663399\",\n    Yd: \"ff0000\",\n    Psybrown: \"bc8f8f\",\n    PyOXe: \"4169e1\",\n    saddNbPwn: \"8b4513\",\n    sOmon: \"fa8072\",\n    sandybPwn: \"f4a460\",\n    sHgYF: \"2e8b57\",\n    sHshell: \"fff5ee\",\n    siFna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyXe: \"87ceeb\",\n    UXe: \"6a5acd\",\n    UWay: \"708090\",\n    UgYy: \"708090\",\n    snow: \"fffafa\",\n    sprRggYF: \"ff7f\",\n    stAlXe: \"4682b4\",\n    tan: \"d2b48c\",\n    teO: \"8080\",\n    tEstN: \"d8bfd8\",\n    tomato: \"ff6347\",\n    Qe: \"40e0d0\",\n    viTet: \"ee82ee\",\n    JHt: \"f5deb3\",\n    wEte: \"ffffff\",\n    wEtesmoke: \"f5f5f5\",\n    Lw: \"ffff00\",\n    LwgYF: \"9acd32\"\n};\nfunction unpack() {\n    const unpacked = {};\n    const keys = Object.keys(names$1);\n    const tkeys = Object.keys(map);\n    let i, j, k, ok, nk;\n    for(i = 0; i < keys.length; i++){\n        ok = nk = keys[i];\n        for(j = 0; j < tkeys.length; j++){\n            k = tkeys[j];\n            nk = nk.replace(k, map[k]);\n        }\n        k = parseInt(names$1[ok], 16);\n        unpacked[nk] = [\n            k >> 16 & 0xFF,\n            k >> 8 & 0xFF,\n            k & 0xFF\n        ];\n    }\n    return unpacked;\n}\nlet names;\nfunction nameParse(str) {\n    if (!names) {\n        names = unpack();\n        names.transparent = [\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    const a = names[str.toLowerCase()];\n    return a && {\n        r: a[0],\n        g: a[1],\n        b: a[2],\n        a: a.length === 4 ? a[3] : 255\n    };\n}\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n    const m = RGB_RE.exec(str);\n    let a = 255;\n    let r, g, b;\n    if (!m) {\n        return;\n    }\n    if (m[7] !== r) {\n        const v = +m[7];\n        a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n    }\n    r = +m[1];\n    g = +m[3];\n    b = +m[5];\n    r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n    g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n    b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction rgbString(v) {\n    return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);\n}\nconst to = (v)=>v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = (v)=>v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n    const r = from(b2n(rgb1.r));\n    const g = from(b2n(rgb1.g));\n    const b = from(b2n(rgb1.b));\n    return {\n        r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n        g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n        b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n        a: rgb1.a + t * (rgb2.a - rgb1.a)\n    };\n}\nfunction modHSL(v, i, ratio) {\n    if (v) {\n        let tmp = rgb2hsl(v);\n        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n        tmp = hsl2rgb(tmp);\n        v.r = tmp[0];\n        v.g = tmp[1];\n        v.b = tmp[2];\n    }\n}\nfunction clone(v, proto) {\n    return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n    var v = {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n    };\n    if (Array.isArray(input)) {\n        if (input.length >= 3) {\n            v = {\n                r: input[0],\n                g: input[1],\n                b: input[2],\n                a: 255\n            };\n            if (input.length > 3) {\n                v.a = n2b(input[3]);\n            }\n        }\n    } else {\n        v = clone(input, {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 1\n        });\n        v.a = n2b(v.a);\n    }\n    return v;\n}\nfunction functionParse(str) {\n    if (str.charAt(0) === \"r\") {\n        return rgbParse(str);\n    }\n    return hueParse(str);\n}\nclass Color {\n    constructor(input){\n        if (input instanceof Color) {\n            return input;\n        }\n        const type = typeof input;\n        let v;\n        if (type === \"object\") {\n            v = fromObject(input);\n        } else if (type === \"string\") {\n            v = hexParse(input) || nameParse(input) || functionParse(input);\n        }\n        this._rgb = v;\n        this._valid = !!v;\n    }\n    get valid() {\n        return this._valid;\n    }\n    get rgb() {\n        var v = clone(this._rgb);\n        if (v) {\n            v.a = b2n(v.a);\n        }\n        return v;\n    }\n    set rgb(obj) {\n        this._rgb = fromObject(obj);\n    }\n    rgbString() {\n        return this._valid ? rgbString(this._rgb) : undefined;\n    }\n    hexString() {\n        return this._valid ? hexString(this._rgb) : undefined;\n    }\n    hslString() {\n        return this._valid ? hslString(this._rgb) : undefined;\n    }\n    mix(color, weight) {\n        if (color) {\n            const c1 = this.rgb;\n            const c2 = color.rgb;\n            let w2;\n            const p = weight === w2 ? 0.5 : weight;\n            const w = 2 * p - 1;\n            const a = c1.a - c2.a;\n            const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n            w2 = 1 - w1;\n            c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n            c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n            c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n            c1.a = p * c1.a + (1 - p) * c2.a;\n            this.rgb = c1;\n        }\n        return this;\n    }\n    interpolate(color, t) {\n        if (color) {\n            this._rgb = interpolate(this._rgb, color._rgb, t);\n        }\n        return this;\n    }\n    clone() {\n        return new Color(this.rgb);\n    }\n    alpha(a) {\n        this._rgb.a = n2b(a);\n        return this;\n    }\n    clearer(ratio) {\n        const rgb = this._rgb;\n        rgb.a *= 1 - ratio;\n        return this;\n    }\n    greyscale() {\n        const rgb = this._rgb;\n        const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n        rgb.r = rgb.g = rgb.b = val;\n        return this;\n    }\n    opaquer(ratio) {\n        const rgb = this._rgb;\n        rgb.a *= 1 + ratio;\n        return this;\n    }\n    negate() {\n        const v = this._rgb;\n        v.r = 255 - v.r;\n        v.g = 255 - v.g;\n        v.b = 255 - v.b;\n        return this;\n    }\n    lighten(ratio) {\n        modHSL(this._rgb, 2, ratio);\n        return this;\n    }\n    darken(ratio) {\n        modHSL(this._rgb, 2, -ratio);\n        return this;\n    }\n    saturate(ratio) {\n        modHSL(this._rgb, 1, ratio);\n        return this;\n    }\n    desaturate(ratio) {\n        modHSL(this._rgb, 1, -ratio);\n        return this;\n    }\n    rotate(deg) {\n        rotate(this._rgb, deg);\n        return this;\n    }\n}\nfunction index_esm(input) {\n    return new Color(input);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@kurkle/color/dist/color.esm.js\n");

/***/ })

};
;